// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Member        Member[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
    id       String    @id @default(cuid())
    name     String
    members  Member[]
    events   Event[]
    messages Message[]
}

model Member {
    id     String  @id @default(cuid())
    name   String
    user   User    @relation(fields: [userId], references: [id])
    userId String
    role   String
    stats  Stats[]
    Team   Team?   @relation(fields: [teamId], references: [id])
    teamId String?
}

model Event {
    id        String    @id @default(cuid())
    homeScore Int
    awayScore Int
    date      DateTime
    type      String
    status    String
    location  String
    rsvp      Json
    Team      Team?     @relation(fields: [teamId], references: [id])
    teamId    String?
    Message   Message[]
}

model Stats {
    id           String   @id @default(cuid())
    type         String
    value        Int
    inningNumber Int
    inningType   String
    member       Member   @relation(fields: [memberId], references: [id])
    memberId     String
    createdAt    DateTime @default(now())
}

model Message {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    event     Event    @relation(fields: [eventId], references: [id])
    eventId   String
    Team      Team?    @relation(fields: [teamId], references: [id])
    teamId    String?
}
